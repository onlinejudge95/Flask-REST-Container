image: docker:stable

stages:
  - test
  - build
  - deploy

variables:
  IMAGE: registry.gitlab.com/onlinejudge95/flask-rest-container

test:
  stage: test
  image: $IMAGE:latest
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: users
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: ""
    DATABASE_TEST_URL: postgres://runner@postgres:5432/users
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - curl https://deepsource.io/cli | sh
  script:
    - pytest app/tests/unit/* --cov-report xml:coverage/xml/unit
    - ./bin/deepsource report --analyzer test-coverage --key python --value-file .coverage/xml/unit/coverage.xml
    - pytest app/tests/functional/* --cov-report xml:coverage/xml/functional
    - ./bin/deepsource report --analyzer test-coverage --key python --value-file .coverage/xml/functional/coverage.xml

build:
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE:latest || true
    - docker build
      --cache-from $IMAGE:latest
      --tag $IMAGE:latest
      --file prod.Dockerfile
      "."
    - docker push $IMAGE:latest

deploy:
  stage: deploy
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    HEROKU_APP_NAME: rest-container-staging
    HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
  script:
    - apk add --no-cache curl
    - docker build
      --tag $HEROKU_REGISTRY_IMAGE
      --file prod.Dockerfile
      "."
    - docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
    - docker push $HEROKU_REGISTRY_IMAGE
    - ./release.sh
